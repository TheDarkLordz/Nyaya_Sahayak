// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow that suggests relevant Indian laws and provides general advice based on a user's legal question.
 *
 * - suggestRelevantLaws - A function that suggests relevant laws and advice.
 * - SuggestRelevantLawsInput - The input type for the suggestRelevantLaws function.
 * - SuggestRelevantLawsOutput - The return type for the suggestRelevantLaws function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestRelevantLawsInputSchema = z.object({
  legalQuestion: z
    .string()
    .describe('The legal question in natural language.'),
});
export type SuggestRelevantLawsInput = z.infer<
  typeof SuggestRelevantLawsInputSchema
>;

const LawSuggestionItemSchema = z.object({
  lawName: z.string().describe('The name or section of the relevant Indian law.'),
  advice: z.string().describe('General guidance or potential steps to consider in relation to this law and the user\'s situation. This is not legal advice.'),
});

const SuggestRelevantLawsOutputSchema = z.object({
  suggestions: z
    .array(LawSuggestionItemSchema)
    .describe('A list of suggested laws and corresponding general advice.'),
});
export type SuggestRelevantLawsOutput = z.infer<
  typeof SuggestRelevantLawsOutputSchema
>;

export async function suggestRelevantLaws(
  input: SuggestRelevantLawsInput
): Promise<SuggestRelevantLawsOutput> {
  return suggestRelevantLawsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestRelevantLawsPrompt',
  input: {schema: SuggestRelevantLawsInputSchema},
  output: {schema: SuggestRelevantLawsOutputSchema},
  prompt: `You are an AI legal assistant specializing in Indian law. Your role is to help users understand potential legal avenues related to their questions by suggesting relevant laws and providing general guidance.

Based on the user's legal question, provide a list of potentially relevant Indian laws or legal sections. For each law or section you suggest, also provide practical, general advice or guidance on what steps the user might consider in relation to that law and their specific situation. This guidance should be for informational purposes only and not constitute specific legal advice.

Question: {{{legalQuestion}}}

Please provide the output as a JSON object containing a single key "suggestions". The value of "suggestions" should be an array of objects. Each object in the array must have two string properties: "lawName" (for the name/section of the law) and "advice" (for the general guidance). If no specific laws are found, return an empty array for "suggestions".`,
});

const suggestRelevantLawsFlow = ai.defineFlow(
  {
    name: 'suggestRelevantLawsFlow',
    inputSchema: SuggestRelevantLawsInputSchema,
    outputSchema: SuggestRelevantLawsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
